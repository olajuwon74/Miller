/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface KarokeInterface extends utils.Interface {
  functions: {
    "addressAdded(address)": FunctionFragment;
    "addressSelected(address)": FunctionFragment;
    "balance()": FunctionFragment;
    "finalist(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "index()": FunctionFragment;
    "indicate()": FunctionFragment;
    "startSession(uint8,uint256,uint256)": FunctionFragment;
    "tip(address,uint256)": FunctionFragment;
    "upload()": FunctionFragment;
    "viewTotalApplicants()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressAdded"
      | "addressSelected"
      | "balance"
      | "finalist"
      | "index"
      | "indicate"
      | "startSession"
      | "tip"
      | "upload"
      | "viewTotalApplicants"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressAdded",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressSelected",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalist",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "index", values?: undefined): string;
  encodeFunctionData(functionFragment: "indicate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startSession",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tip",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upload", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "viewTotalApplicants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressSelected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "index", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "indicate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upload", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewTotalApplicants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "SessionIsOn(uint256,uint256)": EventFragment;
    "TotalApplicants(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SessionIsOn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalApplicants"): EventFragment;
}

export interface SessionIsOnEventObject {
  staDate: BigNumber;
  endingDate: BigNumber;
}
export type SessionIsOnEvent = TypedEvent<
  [BigNumber, BigNumber],
  SessionIsOnEventObject
>;

export type SessionIsOnEventFilter = TypedEventFilter<SessionIsOnEvent>;

export interface TotalApplicantsEventObject {
  number: BigNumber;
}
export type TotalApplicantsEvent = TypedEvent<
  [BigNumber],
  TotalApplicantsEventObject
>;

export type TotalApplicantsEventFilter = TypedEventFilter<TotalApplicantsEvent>;

export interface Karoke extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KarokeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressAdded(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { singerAdress: string; added: boolean }>;

    addressSelected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { secAddress: string; chosen: boolean }>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalist(
      _select: BigNumberish,
      _select2: BigNumberish,
      _select3: BigNumberish,
      _select4: BigNumberish,
      _select5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    index(overrides?: CallOverrides): Promise<[BigNumber]>;

    indicate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startSession(
      _status: BigNumberish,
      sDate: BigNumberish,
      eDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tip(
      _addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upload(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewTotalApplicants(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressAdded(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { singerAdress: string; added: boolean }>;

  addressSelected(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { secAddress: string; chosen: boolean }>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  finalist(
    _select: BigNumberish,
    _select2: BigNumberish,
    _select3: BigNumberish,
    _select4: BigNumberish,
    _select5: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  index(overrides?: CallOverrides): Promise<BigNumber>;

  indicate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startSession(
    _status: BigNumberish,
    sDate: BigNumberish,
    eDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tip(
    _addr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upload(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewTotalApplicants(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    addr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressAdded(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { singerAdress: string; added: boolean }>;

    addressSelected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { secAddress: string; chosen: boolean }>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    finalist(
      _select: BigNumberish,
      _select2: BigNumberish,
      _select3: BigNumberish,
      _select4: BigNumberish,
      _select5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    index(overrides?: CallOverrides): Promise<BigNumber>;

    indicate(overrides?: CallOverrides): Promise<void>;

    startSession(
      _status: BigNumberish,
      sDate: BigNumberish,
      eDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tip(
      _addr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upload(overrides?: CallOverrides): Promise<void>;

    viewTotalApplicants(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      addr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SessionIsOn(uint256,uint256)"(
      staDate?: null,
      endingDate?: null
    ): SessionIsOnEventFilter;
    SessionIsOn(staDate?: null, endingDate?: null): SessionIsOnEventFilter;

    "TotalApplicants(uint256)"(number?: null): TotalApplicantsEventFilter;
    TotalApplicants(number?: null): TotalApplicantsEventFilter;
  };

  estimateGas: {
    addressAdded(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addressSelected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    finalist(
      _select: BigNumberish,
      _select2: BigNumberish,
      _select3: BigNumberish,
      _select4: BigNumberish,
      _select5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    index(overrides?: CallOverrides): Promise<BigNumber>;

    indicate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startSession(
      _status: BigNumberish,
      sDate: BigNumberish,
      eDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tip(
      _addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upload(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewTotalApplicants(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressAdded(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressSelected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalist(
      _select: BigNumberish,
      _select2: BigNumberish,
      _select3: BigNumberish,
      _select4: BigNumberish,
      _select5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    index(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indicate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startSession(
      _status: BigNumberish,
      sDate: BigNumberish,
      eDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tip(
      _addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upload(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewTotalApplicants(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
