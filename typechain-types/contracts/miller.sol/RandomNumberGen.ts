/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface RandomNumberGenInterface extends utils.Interface {
  functions: {
    "getRandomAddresses(uint256,uint256,uint256)": FunctionFragment;
    "getRandomness()": FunctionFragment;
    "randomNumber()": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "setAdress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getRandomAddresses"
      | "getRandomness"
      | "randomNumber"
      | "rawFulfillRandomness"
      | "setAdress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getRandomAddresses",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdress", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getRandomAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdress", data: BytesLike): Result;

  events: {
    "ChosenOnes(uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChosenOnes"): EventFragment;
}

export interface ChosenOnesEventObject {
  expandedValues: BigNumber[];
}
export type ChosenOnesEvent = TypedEvent<[BigNumber[]], ChosenOnesEventObject>;

export type ChosenOnesEventFilter = TypedEventFilter<ChosenOnesEvent>;

export interface RandomNumberGen extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RandomNumberGenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getRandomAddresses(
      _randomNumber: BigNumberish,
      numberSelected: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRandomness(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    randomNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdress(
      add: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getRandomAddresses(
    _randomNumber: BigNumberish,
    numberSelected: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRandomness(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  randomNumber(overrides?: CallOverrides): Promise<BigNumber>;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdress(
    add: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getRandomAddresses(
      _randomNumber: BigNumberish,
      numberSelected: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRandomness(overrides?: CallOverrides): Promise<string>;

    randomNumber(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdress(add: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChosenOnes(uint256[])"(expandedValues?: null): ChosenOnesEventFilter;
    ChosenOnes(expandedValues?: null): ChosenOnesEventFilter;
  };

  estimateGas: {
    getRandomAddresses(
      _randomNumber: BigNumberish,
      numberSelected: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRandomness(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    randomNumber(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdress(
      add: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRandomAddresses(
      _randomNumber: BigNumberish,
      numberSelected: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRandomness(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    randomNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdress(
      add: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
