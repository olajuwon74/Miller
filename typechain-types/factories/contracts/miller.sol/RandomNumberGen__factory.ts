/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RandomNumberGen,
  RandomNumberGenInterface,
} from "../../../contracts/miller.sol/RandomNumberGen";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vrfCoordinator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_link",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "expandedValues",
        type: "uint256[]",
      },
    ],
    name: "ChosenOnes",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_randomNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numberSelected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getRandomAddresses",
    outputs: [
      {
        internalType: "uint256[]",
        name: "_expandedValues",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getRandomness",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "randomNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "randomness",
        type: "uint256",
      },
    ],
    name: "rawFulfillRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "add",
        type: "address",
      },
    ],
    name: "setAdress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040523480156200001157600080fd5b50604051620012e6380380620012e6833981810160405281019062000037919062000106565b83838173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505081600181905550806002819055505050505062000208565b600081519050620000d281620001ba565b92915050565b600081519050620000e981620001d4565b92915050565b6000815190506200010081620001ee565b92915050565b600080600080608085870312156200011d57600080fd5b60006200012d87828801620000c1565b94505060206200014087828801620000c1565b93505060406200015387828801620000d8565b92505060606200016687828801620000ef565b91505092959194509250565b60006200017f8262000190565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620001c58162000172565b8114620001d157600080fd5b50565b620001df8162000186565b8114620001eb57600080fd5b50565b620001f981620001b0565b81146200020557600080fd5b50565b60805160601c60a05160601c6110a4620002426000396000818161014601526105ea0152600081816101e701526105ae01526110a46000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630e807d6e1461005c57806394985ddd14610078578063aaae7b8614610094578063ccbac9f5146100b2578063ef47e636146100d0575b600080fd5b6100766004803603810190610071919061084b565b610100565b005b610092600480360381019061008d919061089d565b610144565b005b61009c6101e0565b6040516100a99190610bde565b60405180910390f35b6100ba6102e2565b6040516100c79190610ca7565b60405180910390f35b6100ea60048036038101906100e59190610902565b6102e8565b6040516100f79190610b9a565b60405180910390f35b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c990610c87565b60405180910390fd5b6101dc828261059f565b5050565b60006002547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161023e9190610b41565b60206040518083038186803b15801561025657600080fd5b505afa15801561026a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028e91906108d9565b10156102cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c690610c67565b60405180910390fd5b6102dd6001546002546105aa565b905090565b60035481565b60608060049080519060200190610300929190610778565b50818310610337577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b836003819055506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663d2b584926040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103ad57600080fd5b505af11580156103c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e591906108d9565b92508367ffffffffffffffff811115610427577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104555781602001602082028036833780820191505090505b506004908051906020019061046b929190610778565b5060005b8481101561050b57836003548260405160200161048d929190610cc2565b6040516020818303038152906040528051906020012060001c6104b09190610eda565b600482815481106104ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550808061050390610e7d565b91505061046f565b507f80bf429cbb6b6034f0139c07c0d61106d3b8bdf1e084377be3d549767454e96a600460405161053c9190610bbc565b60405180910390a1600480548060200260200160405190810160405280929190818152602001828054801561059057602002820191906000526020600020905b81548152602001906001019080831161057c575b50505050509150509392505050565b806003819055505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200161061e929190610bf9565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161064b93929190610b5c565b602060405180830381600087803b15801561066557600080fd5b505af1158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d9190610874565b5060006106bf8460003060008089815260200190815260200160002054610709565b90506001600080868152602001908152602001600020546106e09190610d7e565b600080868152602001908152602001600020819055506107008482610745565b91505092915050565b6000848484846040516020016107229493929190610c22565b6040516020818303038152906040528051906020012060001c9050949350505050565b6000828260405160200161075a929190610b15565b60405160208183030381529060405280519060200120905092915050565b8280548282559060005260206000209081019282156107b4579160200282015b828111156107b3578251825591602001919060010190610798565b5b5090506107c191906107c5565b5090565b5b808211156107de5760008160009055506001016107c6565b5090565b6000813590506107f181611012565b92915050565b60008151905061080681611029565b92915050565b60008135905061081b81611040565b92915050565b60008135905061083081611057565b92915050565b60008151905061084581611057565b92915050565b60006020828403121561085d57600080fd5b600061086b848285016107e2565b91505092915050565b60006020828403121561088657600080fd5b6000610894848285016107f7565b91505092915050565b600080604083850312156108b057600080fd5b60006108be8582860161080c565b92505060206108cf85828601610821565b9150509250929050565b6000602082840312156108eb57600080fd5b60006108f984828501610836565b91505092915050565b60008060006060848603121561091757600080fd5b600061092586828701610821565b935050602061093686828701610821565b925050604061094786828701610821565b9150509250925092565b600061095d8383610ae0565b60208301905092915050565b61097281610dde565b82525050565b600061098382610d10565b61098d8185610d4b565b935061099883610ceb565b8060005b838110156109c95781516109b08882610951565b97506109bb83610d31565b92505060018101905061099c565b5085935050505092915050565b60006109e182610d1b565b6109eb8185610d4b565b93506109f683610cfb565b8060005b83811015610a2e57610a0b82610f69565b610a158882610951565b9750610a2083610d3e565b9250506001810190506109fa565b5085935050505092915050565b610a4481610dfc565b82525050565b610a5b610a5682610dfc565b610ec6565b82525050565b6000610a6c82610d26565b610a768185610d5c565b9350610a86818560208601610e30565b610a8f81610f7c565b840191505092915050565b6000610aa7602883610d6d565b9150610ab282610f9a565b604082019050919050565b6000610aca601f83610d6d565b9150610ad582610fe9565b602082019050919050565b610ae981610e26565b82525050565b610af881610e26565b82525050565b610b0f610b0a82610e26565b610ed0565b82525050565b6000610b218285610a4a565b602082019150610b318284610afe565b6020820191508190509392505050565b6000602082019050610b566000830184610969565b92915050565b6000606082019050610b716000830186610969565b610b7e6020830185610aef565b8181036040830152610b908184610a61565b9050949350505050565b60006020820190508181036000830152610bb48184610978565b905092915050565b60006020820190508181036000830152610bd681846109d6565b905092915050565b6000602082019050610bf36000830184610a3b565b92915050565b6000604082019050610c0e6000830185610a3b565b610c1b6020830184610aef565b9392505050565b6000608082019050610c376000830187610a3b565b610c446020830186610aef565b610c516040830185610969565b610c5e6060830184610aef565b95945050505050565b60006020820190508181036000830152610c8081610a9a565b9050919050565b60006020820190508181036000830152610ca081610abd565b9050919050565b6000602082019050610cbc6000830184610aef565b92915050565b6000604082019050610cd76000830185610aef565b610ce46020830184610aef565b9392505050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081549050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610d8982610e26565b9150610d9483610e26565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dc957610dc8610f0b565b5b828201905092915050565b6000819050919050565b6000610de982610e06565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610e4e578082015181840152602081019050610e33565b83811115610e5d576000848401525b50505050565b6000610e76610e7183610f8d565b610dd4565b9050919050565b6000610e8882610e26565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ebb57610eba610f0b565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000610ee582610e26565b9150610ef083610e26565b925082610f0057610eff610f3a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f758254610e63565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b7f496e6164657175617465204c696e6b20746f2066756e6420746869732074726160008201527f6e73616374696f6e000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b61101b81610dde565b811461102657600080fd5b50565b61103281610df0565b811461103d57600080fd5b50565b61104981610dfc565b811461105457600080fd5b50565b61106081610e26565b811461106b57600080fd5b5056fea2646970667358221220a63034b11d5e7d3dfb806d409504501296806d71e645a7ae3ff1d3375ce77b2e64736f6c63430008040033";

type RandomNumberGenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomNumberGenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandomNumberGen__factory extends ContractFactory {
  constructor(...args: RandomNumberGenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vrfCoordinator: string,
    _link: string,
    _keyHash: BytesLike,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RandomNumberGen> {
    return super.deploy(
      _vrfCoordinator,
      _link,
      _keyHash,
      _fee,
      overrides || {}
    ) as Promise<RandomNumberGen>;
  }
  override getDeployTransaction(
    _vrfCoordinator: string,
    _link: string,
    _keyHash: BytesLike,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _vrfCoordinator,
      _link,
      _keyHash,
      _fee,
      overrides || {}
    );
  }
  override attach(address: string): RandomNumberGen {
    return super.attach(address) as RandomNumberGen;
  }
  override connect(signer: Signer): RandomNumberGen__factory {
    return super.connect(signer) as RandomNumberGen__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomNumberGenInterface {
    return new utils.Interface(_abi) as RandomNumberGenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RandomNumberGen {
    return new Contract(address, _abi, signerOrProvider) as RandomNumberGen;
  }
}
